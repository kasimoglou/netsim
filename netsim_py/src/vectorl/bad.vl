
import sys;

def time now = sys.now();
//from sim import now;

//// First car will come in the parking at 9, the second at 9.15 etc
caonst time carInTime = [9, 9.15, 9.30, 10] ; 

//// The first car that came at 9 will leave at 10, the second at 9:30, etc
const time carOutTime = [10, 9.30, 10.15, 10.30];

var int arrival = 0;

//// First car will go to slot 1 and second car to slot 2. 
//// The third car arrives when second car has left so it will go to lot 2, etc
const int carSpot = [0,1,1,0];  


//  
//// This is what we want. The sensor measurements (taken or not) at each
//// time
var bool spotTaken = [false, false]; 

//// i is index    

event carIn(int i);
event carOut(int i);

on carIn { // line 22
    def int pos = carSpot[i];
    const real PI = 3.14;

    print("Car arrived at spot", pos, "at time=", now);
    spotTaken[pos] := !spotTaken[pos];

    // schedule departure
    emit carOut(arrival) after carOutTime[arrival]-now;

    // schedule arrival of next car 
    arrival := arrival + 1;
    if(arrival < shapeof(carInTime)[0]) {
        emit carIn(arrival) after carInTime[arrival]-now;
        print("Next arrival will be at time ",carInTime[arrival]);
    } else {
        print("No mext arrival, total arrivals=",arrival);        
    }
}    

on carOut {    
    def int pos = carSpot[i];

    print("Car left spot", pos, "at time=", now);
    spotTaken[pos] := !spotTaken[pos];
}

on Init {
    // arrival of first car
    emit carIn(arrival) after carInTime[arrival] - now;
}

const real noise = [1.4, 1.9];

def real noisy_measurement(int k) {
    def int spots = shapeof(spotTaken)[0];
    def real varnoise = spots*noise;

    varnoise[carSpot[k]]
}

event measurement(int i, real val);

on carOut {
    if( i < shapeof(carSpot)[0] ) {
        emit measurement(i, noisy_measurement(i)) after 1.0;
        print("Emitted measurement", noisy_measurement(i));
    }
    else
        print("We are done",10,20,"bye");
}
